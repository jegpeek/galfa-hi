#!/usr/bin/perl 
# -w

#
# Jeff Mock
# 2030 Gough 
# San Francisco, CA 94109
# jeff@mock.com
# (c) 2004
#

#
# $Id: gtest,v 1.3 2004/10/13 06:24:55 jeff Exp $
#

use strict;
use Getopt::Long;
use IO::Socket;
use IO::Select;

our $galfa_magic    = 0xdeadbeef;
our $galfa_version  = 0x00000101;

our $opt_galfa      = "seti3.mock.com";
our $opt_port       = 1420;
our $opt_setdac     = 0;
our $opt_t1         = 0;
our $opt_t2         = 0;
our $opt_default    = 0;
our $opt_settings   = 0;
our $opt_levels     = 0;
our $opt_data       = 0;
our $opt_abort      = 0;

our %opts = (
    'galfa=s'                   => \$opt_galfa,
    'port=n'                    => \$opt_port,
    't1'                        => \$opt_t1,
    't2'                        => \$opt_t2,
    'default'                   => \$opt_default,
    'settings'                  => \$opt_settings,
    'dac=o'                     => \$opt_setdac,
    'levels'                    => \$opt_levels,
    'data=o'                    => \$opt_data,
    'abort'                     => \$opt_abort,
    
);
if (!GetOptions(%opts)) {
    print STDERR "
        Exercise socket interface to galfa
        
        gtest [options]
            [--galfa=s]         Name of the spectrometer
            [--port=n]          Port to connect om spectrometer ($opt_port) 
            [--t1]              Galfa test 1
            [--t2]              Galfa test 2
            [--default]         Set default galfa settings
            [--settings]        Print current galfa settings
            [--levels]          Get current RMS levels
            [--dac=n]           Set DAC levels to n ADC RMS units
            [--data=n]          Collect n seconds of data
            [--abort]           Abort test

    \n";
    exit 1;
}

# Open connection to galfa box
#
our $g = IO::Socket::INET->new (
        PeerAddr => $opt_galfa,
        PeerPort => $opt_port,
        Proto    => "tcp",
        Type     => SOCK_STREAM
    ) or die "Couldn't connect to $opt_galfa:$opt_port : $@\n";


# Send a command packet to galfa
#
sub send_cmd {
    my  $sock = shift;
    my  $p = shift;     # reference to hash

    my $pkt = pack 'N11a124',
        164,
        $galfa_magic,
        $galfa_version,
        $$p{cmd},
        0,
        $$p{cnt},
        $$p{mix},
        $$p{wshift},
        $$p{nshift},
        $$p{wpfb},
        $$p{npfb},
        "";
    $sock->send($pkt);
}

# Block waiting for input available on socket with timeout
#
sub sock_canread {
    my  $sock = shift;
    my  $to = shift;
    
    my $select = IO::Select->new($sock);
    my $r = $select->can_read($to);
    return $r;
}

# Read a requested number of bytes from the socket or
# die with a timeout
#
sub read_sock {
    my  $sock = shift;
    my  $len = shift;

    my  $pkt = "";
    while ($len > 0) {
        die "Socket timed out" unless sock_canread($sock, 5);
        my  $pktt;
        die "Recv failed: $!" unless 
            defined(recv($sock, $pktt, $len, 0));

        $len -= length($pktt);
        $pkt .= $pktt;
    }
    return $pkt;
}

# Read a packet from galfa, can be either reponse for data
# packet
#
sub get_resp {
    my  $sock = shift;

    my  $lenp = read_sock($sock, 4);
    my  $len = unpack 'N', $lenp;
    my  $pkt = read_sock($sock, $len);
    my  %resp = ();

    if ($len == 164) {
        # response packet
        my @vals = unpack 'N*', $pkt;
        my @dac = @vals[13..26];
        my @rms = @vals[27..40];
        %resp = (
            magic       => $vals[0],
            version     => $vals[1],
            cmd         => $vals[2],
            response    => $vals[3],
            cnt         => $vals[4],
            mix         => $vals[5],
            wshift      => $vals[6],
            nshift      => $vals[7],
            wpfb        => $vals[8],
            npfb        => $vals[9],
            beam        => $vals[10],
            time1       => $vals[11],
            time2       => $vals[12],
            dac         => \@dac,
            rms         => \@rms,
        );
        die "Magic failure from galfa"
            if $resp{magic} != $galfa_magic;
        die "Version failure from galfa"
            if $resp{version} != $galfa_version;
    } elsif ($len == 32804) {
        # Data packet
        my @vals = unpack 'N*', $pkt;
        # my @ndata = @vals[10..7944];
        # my @wdata = @vals[7945..8200];
        my @ndata = @vals[10..7688];
        my @wdata = @vals[7689..8200];
        %resp = (
            magic       => $vals[0],
            version     => $vals[1],
            cmd         => $vals[2],
            response    => $vals[3],
            error       => $vals[4],
            time1       => $vals[5],
            time2       => $vals[6],
            seq         => $vals[7],
            beam        => $vals[8],
            polarity    => $vals[9],
            ndata       => \@ndata,
            wdata       => \@wdata,
        );
        printf "Data seq: %d, beam: %d, polarity: %d\n",
            $resp{seq}, $resp{beam}, $resp{polarity};
    } else {
        die "Hmm unknown packet size of $len";
    }
    return \%resp;
}

sub print_pkt {
    my  $resp = shift;

    print  "Response packet\n";
    printf "  magic       %08x\n", $$resp{magic};
    printf "  version     %08x\n", $$resp{version};
    printf "  cmd         %d\n", $$resp{cmd};
    printf "  response    %d\n", $$resp{response};
    printf "  cnt         %d\n", $$resp{cnt};
    printf "  mix         %d\n", $$resp{mix};
    printf "  wshift      %d\n", $$resp{wshift};
    printf "  nshift      %d\n", $$resp{nshift};
    printf "  wpfb        %03x\n", $$resp{wpfb};
    printf "  npfb        %04x\n", $$resp{npfb};
    printf "  beam        %02x\n", $$resp{beam};
    printf "  time1       %d\n", $$resp{time1};
    printf "  time2       %d\n", $$resp{time2};
    printf "  dac         %s\n", join(' ', @{$$resp{dac}});
    printf "  rms         %s\n", join(' ', @{$$resp{rms}});
    print  "\n";
}


if ($opt_t1) {
    my %getparam = (
        cmd         => 1,
    );
    
    send_cmd($g, \%getparam);
    my $psave = get_resp($g);
    my $p = 0.5;

    my %nparam = %$psave;
    $nparam{cmd} = 2; # set params

    # Sweep mixer
    print "Mixer\n";
    for my $i (0..31) {
        $nparam{mix} = $i;
        send_cmd($g, \%nparam);
        sleep($p);
    }
    send_cmd($g, \%getparam);
    my $x = get_resp($g);

    # narrow pfb shift
    print "narrow pfb\n";
    for my $i (0..12) {
        $nparam{npfb} = 1<<$i;
        send_cmd($g, \%nparam);
        sleep($p);
    }
    send_cmd($g, \%getparam);
    $x = get_resp($g);

    # wide pfb shift
    print "wide pfb\n";
    for my $i (0..8) {
        $nparam{wpfb} = 1<<$i;
        send_cmd($g, \%nparam);
        sleep($p);
    }
    send_cmd($g, \%getparam);
    $x = get_resp($g);

    # narrow acc shift
    print "narrow acc\n";
    for my $i (0..7) {
        $nparam{nshift} = $i;
        send_cmd($g, \%nparam);
        sleep($p);
    }
    send_cmd($g, \%getparam);
    $x = get_resp($g);

    # wide acc shift
    print "wide acc\n";
    for my $i (0..7) {
        $nparam{wshift} = $i;
        send_cmd($g, \%nparam);
        sleep($p);
    }
    send_cmd($g, \%getparam);
    $x = get_resp($g);

    $$psave{cmd} = 2;
    send_cmd($g, $psave);
    print "Done\n";
}

if ($opt_t2) {
    my %getparam = (
        cmd         => 1,
    );
    
    send_cmd($g, \%getparam);
    my $psave = get_resp($g);
    my $p = 0.5;

    my %nparam = %$psave;
    $nparam{cmd} = 2; # set params

    # Sweep mixer
    print "Testing mixer settings\n";
    for my $i (0..31) {
        $nparam{mix} = $i;
        send_cmd($g, \%nparam);
        send_cmd($g, \%getparam);
        my $x = get_resp($g);
        die "Mix set error $i $$x{mix}" if $i != $$x{mix};
    }

    # narrow pfb shift
    print "Testing narrow pfb settings\n";
    for my $i (0..12) {
        my $val = 1<<$i;
        $nparam{npfb} = $val;
        send_cmd($g, \%nparam);
        send_cmd($g, \%getparam);
        my $x = get_resp($g);
        die "Narrow pfb set error $val $$x{npfb}" if $val != $$x{npfb};
    }

    # wide pfb shift
    print "Testing wide pfb settings\n";
    for my $i (0..8) {
        my $val = 1<<$i;
        $nparam{wpfb} = 1<<$i;
        send_cmd($g, \%nparam);
        send_cmd($g, \%getparam);
        my $x = get_resp($g);
        die "Wide pfb set error $val $$x{wpfb}" if $val != $$x{wpfb};
    }

    # narrow acc shift
    print "Testing narrow acc setting\n";
    for my $i (0..7) {
        $nparam{nshift} = $i;
        send_cmd($g, \%nparam);
        send_cmd($g, \%getparam);
        my $x = get_resp($g);
        die "Narrow acc set error $i $$x{nshift}" if $i != $$x{nshift};
    }

    # wide acc shift
    print "Testing wide acc setting\n";
    for my $i (0..7) {
        $nparam{wshift} = $i;
        send_cmd($g, \%nparam);
        send_cmd($g, \%getparam);
        my $x = get_resp($g);
        die "Wide acc set error $i $$x{wshift}" if $i != $$x{wshift};
    }

    $$psave{cmd} = 2;
    send_cmd($g, $psave);
    print "Test complete\n";
}


if ($opt_default) {
    my %setparam = (
        cmd         => 2,
        cnt         => 0,
        mix         => 26,
        wshift      => 0,
        nshift      => 0,
        wpfb        => 0xdb,
        npfb        => 0x0555
    );
    send_cmd($g, \%setparam);
}

if ($opt_settings) {
    my %getparam = (
        cmd         => 1,       # get settings
    );
    send_cmd($g, \%getparam);
    my $x = get_resp($g);
    print_pkt($x);
}
    
if ($opt_setdac) {
    my %setdac = (
        cmd         => 5,       # set dac
        cnt         => $opt_setdac,
    );
    send_cmd($g, \%setdac);
    die "Socket timed out setting dac" unless sock_canread($g, 20);
    my $x = get_resp($g);
    print_pkt($x);
}
    
if ($opt_levels) {
    my %levels = (
        cmd         => 6,       # get levels
    );
    send_cmd($g, \%levels);
    my $x = get_resp($g);
    print_pkt($x);
}
    
if ($opt_data) {
    my %getdata = (
        cmd         => 3,       # get data
        cnt         => $opt_data,
    );
    send_cmd($g, \%getdata);
    while (1) {
        my $x = get_resp($g);
    }
}

if ($opt_abort) {
    my %abort = (
        cmd         => 4,       # abort capture
    );
    my %getdata = (
        cmd         => 3,       # get data
        cnt         => 0,
    );
    my %getparam = (
        cmd         => 1,       # get settings
    );
    my %setdac = (
        cmd         => 5,       # set dac
        cnt         => 10,
    );

    send_cmd($g, \%getparam);
    my $x = get_resp($g);
    my $beammask = $$x{beam};
    my $beams = 0;
    for my $i (0..6) {
        $beams++ if $beammask & (1<<$i);
    }
    print "$beams beams\n";

    send_cmd($g, \%setdac);
    die "Socket timed out setting dac" unless sock_canread($g, 20);
    $x = get_resp($g);
    print_pkt($x);

    for(1..4) {
        send_cmd($g, \%getdata);
        for my $i (1 .. 10*$beams*2) {
            $x = get_resp($g);
        }
        send_cmd($g, \%abort);
        print "aborting, sleeping 5s\n";

        # In truth, there might be valid data on the 
        # socket depending on when the abort is sent.  If
        # the abort is sent at a random time, galfa might
        # starting send data.  Galfa will keep sending data
        # for the whole second and then honor the abort.
        #
        # In this case we send the abort right after receiving
        # a packet, so we can be pretty sure that galfa will    
        # get the abort within 1s.
        #
        die "ERROR: Socket has valid data after abort"
            if sock_canread($g, 5);
    }
}

