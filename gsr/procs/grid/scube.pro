;+
; NAME:
;  
;  SCUBE
;
; PURPOSE:
;
;   Make TOGS survey cubes, as described in the /share/gibson1/gsr/cube_templates/ov032
;   as well as in e-mails amongst the TOGS collaborators. 
;    
; CALLING SEQUENCE:
;   scube, root, region, proj, cnx, cny, rs=rs, _REF_EXTRA=_extra, tdf=tdf, spname=spname,  $
;      badrxfile=badrxfile, xingname=xingname, odf=odf, norm=norm, blankfile=blankfile, $
;      arcminperpixel=arcminperpixel, pts=pts, madecubes=madecubes
;
; INPUTS:
;   ROOT -- The main directory in which the project directory
;                 resides (e.g. '/dzd4/heiles/gsrdata/' ) 
;   REGION -- The name of the source as entered into BW_fm (e.g. 'lwa') 
;   PROJ -- The Arecibo project code (e.g. 'a2050') 
;   GRIDNAME- The grid name to use for generated files, e.g. 'hi_res_test'
;   CNX - A number from 0 to 44, selecting which 
;              region in RA to grid
;   CNY - A number from 0 to 4,  selecting which 
;              region in DEC to grid
;
; OPTIONAL INPUTS:
;    NONE.
;
; KEYWORD PARAMETERS:
;   XINGNAME   - The name of the file to read any XING correction data from. This file is
;             generated by xg_assn.pro
;   RS - If set as a two element array of strings, swaps out the first
;               string for the second in the path to the data.
;   BADRXFILE - Any badrx file to use (full path!)
;   SPNAME - Set this to the name of your spcor file to use. If you want
;      to use spcor_NAME.sav, set it to 'NAME'. If you wish to use
;      spcor.sav, just set this to 'null'. This will have been set as a
;      xingname in a previous code, but as the user might want to use
;      an spcor file from a xing file different from the xing file whose
;      xing information they want to use, this is a separate keyword from XINGNAME
;   TDF - use the older two-digit formatting
;   ODF - use older .sav data formatting
;   SAVEPATH - If you wish to save the cube to a directory other than root/proj/region
;              specify the full path here.
;   _EXTRA - You may pass any keywords to SDGRID you wish through this keyword
;            see SDGRID for full list of keywords availible
;    NORM - If set, skip the normalization using the LDS, instead divide
;           the final cube by this value. One can (of course) set this 
;           parameter to 1 to skip the LDS and leave the cube untouched.
;    BLANKFILE - put the full path to a file here that has utc times and beams
;    PTS - set to a list of RAs and decs such that the first RA is in [0,0] 
;          and the first dec is in [0, 1] in hrs, degrees, to highlite these 
;          points. Useful for registry issues.
;    CPP - force C++ implementation.
;    MADECUBES - set if the basic save files are already around
;    NOSLICE -- suppress slice production
;           (to do beam correction as in Hartmann et al)
;    STRAD -- set this to remove sidelobes made by corral.pro
;    SPBLFILE -- the spectral blanking file (no .fits or .sav)
; OUTPUTS:
;   NONE
;
; MODIFICATION HISTORY:
;  Written and Commented by J.E.G. Peek on April 11, 2007
;  Modified for more memory efficiency, JEG Peek, April 25th 2007
;  Added eta parameter for beam cleaning, JEG Peek, January 16th 2008
;  
;-

pro scube, root, region, proj, cnx, cny, rs=rs, _REF_EXTRA=_extra, tdf=tdf, spname=spname, badrxfile=badrxfile, xingname=xingname, odf=odf, blankfile=blankfile, arcminperpixel=arcminperpixel, norm=norm, pts=pts,  cpp=cpp, madecubes=madecubes, noslice=noslice, strad=strad, nocleanup=nocleanup, spblfile=spblfile, fls=fls




if keyword_set(strad) then begin
spawn, 'mv ' + cname(cnx, cny) + '_W.fits '+ cname(cnx, cny) + '_W_NC.fits'
spawn, 'mv ' + cname(cnx, cny) + '_N.fits '+ cname(cnx, cny) + '_N_NC.fits'
spawn, 'mv ' + cname(cnx, cny) + ' '+ cname(cnx, cny) + '_NC'

corral, root + '/' + proj + '/' + region + '/todarr.sav', cnx, cny, cname(cnx, cny) + '_W_NC.fits', flsN, 'W'
corral, root + '/' + proj + '/' + region + '/todarr.sav', cnx, cny, cname(cnx, cny) + '_N_NC.fits', flsW, 'N'
fls = [flsN,flsW]
endif

;find the true center positions from the cnx and cny data. cnx is over RA and runs from

starttime=systime(/sec)

cx0 = 4.0 ;degrees
cy0 = 2.35 ;degrees
dcx = 8. ;degrees
dcy = 8. ;degrees

; centers of the final cube of interest
cx = cx0+cnx*dcx
cy = cy0+cny*dcy

; centers of the subcubes

scx0 = cx - 128./60.
scx1 = cx + 128./60.

scy0 = cy - 128./60. 
scy1 = cy + 128./60.

inttime = fltarr(512, 512)

if keyword_set(dirtycube) then begin
; we assume, for now, that this is a 'W' cube.
;    extract_coords, dirtycube, aa, dd, v, orgcube
endif


print, '0/4'
if not (keyword_set(madecubes)) then begin

hackoff = 1
if hackoff then begin
sdgw, root, region, proj, 'TOGS-' + string(cnx, f='(I2.2)') + '-' +  string(cny, f='(I2.2)') + '-0-0', scx0, scy0, 0, 8191, 1, [256, 256],rs=rs, projection='CAR', _REF_EXTRA=_extra, tdf=tdf, spname=spname,  badrxfile=badrxfile, xingname=xingname,  savepath=savepath, gridfunc='GAUSS', odf=odf, norm=norm, blankfile=blankfile, arcminperpixel=1., pts=pts, /truecart, cpp=cpp, /nofits, spp=spp, eta=eta, strad=strad, ampl=ampl, spblfile=spblfile

inttime[256:511,0:255] = spp

print, '1/4'
if not keyword_set(norm) then delvar, norm

sdgw, root, region, proj, 'TOGS-' + string(cnx, f='(I2.2)') + '-' +  string(cny, f='(I2.2)') + '-1-0', scx1, scy0, 0, 8191, 1, [256, 256],rs=rs, projection='CAR', _REF_EXTRA=_extra, tdf=tdf, spname=spname,  badrxfile=badrxfile, xingname=xingname,  savepath=savepath, gridfunc='GAUSS', odf=odf, norm=norm, blankfile=blankfile, arcminperpixel=1., pts=pts, /truecart, cpp=cpp, /nofits, spp=spp, eta=eta, aa=aa, dd=dd,strad=strad, ampl=ampl, spblfile=spblfile
inttime[0:255,0:255] = spp
endif

print, '2/4'

if not keyword_set(norm) then delvar, norm

sdgw, root, region, proj, 'TOGS-' + string(cnx, f='(I2.2)') + '-' +  string(cny, f='(I2.2)') + '-0-1', scx0, scy1, 0, 8191, 1, [256, 256],rs=rs, projection='CAR', _REF_EXTRA=_extra, tdf=tdf, spname=spname,  badrxfile=badrxfile, xingname=xingname,  savepath=savepath, gridfunc='GAUSS', odf=odf, norm=norm, blankfile=blankfile, arcminperpixel=1., pts=pts, /truecart, cpp=cpp, /nofits, spp=spp, eta=eta, aa=aa, dd=dd, strad=strad, ampl=ampl, spblfile=spblfile
inttime[256:511,256:511] = spp


print, '3/4'

if not keyword_set(norm) then delvar, norm

sdgw, root, region, proj, 'TOGS-' + string(cnx, f='(I2.2)') + '-' +  string(cny, f='(I2.2)') + '-1-1', scx1, scy1, 0, 8191, 1, [256, 256],rs=rs, projection='CAR', _REF_EXTRA=_extra, tdf=tdf, spname=spname,  badrxfile=badrxfile, xingname=xingname,  savepath=savepath, gridfunc='GAUSS', odf=odf, norm=norm, blankfile=blankfile, arcminperpixel=1., pts=pts, /truecart, cpp=cpp, /nofits, spp=spp, eta=eta, aa=aa, dd=dd, strad=strad, ampl=ampl, spblfile=spblfile
inttime[0:255,256:511]= spp

print, '4/4'
endif


if not(keyword_set(savepath)) then savepath = root + proj + '/' + region + '/'

fn00 =savepath + 'TOGS-' + string(cnx, f='(I2.2)') + '-' +  string(cny, f='(I2.2)') + '-0-0' + xingname + '.sav'
fn10 =savepath + 'TOGS-' + string(cnx, f='(I2.2)') + '-' +  string(cny, f='(I2.2)') + '-1-0' + xingname + '.sav'
fn01 =savepath + 'TOGS-' + string(cnx, f='(I2.2)') + '-' +  string(cny, f='(I2.2)') + '-0-1' + xingname + '.sav'
fn11 =savepath + 'TOGS-' + string(cnx, f='(I2.2)') + '-' +  string(cny, f='(I2.2)') + '-1-1' + xingname + '.sav'

fns = [fn00, fn10, fn01, fn11]

; K limits for the data cubes.
usecut = [-200, 200]        ; K, limits.

; a test, just to get bz and bs values
test = intscl(findgen(3), bz, bs,cut=usecut, /force)

;null cube
nc = intarr(512, 512, 2048)

; find date
caldat,systime(/julian), month ,day, year       
dt = string(year, f='(I4.4)') + '-' + string(month, f='(I2.2)') + '-' + string(day, f='(I2.2)')

;integration time cube

restore,  getenv('GSRPATH') + 'savfiles/time_hdr.sav'
sxaddpar, hdr, 'OBJECT', 'GALFA-HI RA+DEC Tile ' + string(cx, f='(I3.3)') + '.00+' +  string(cy, f='(I2.2)') + '.35' + 'Integration Time Map'
sxaddpar, hdr, 'CRPIX1', 256.5 - (180.0 - cx)/0.01666666
sxaddpar, hdr, 'CRPIX2', 256.5 - cy/0.01666666
sxaddpar, hdr, 'DATE', dt, 'Date data cube was created'
Tname = 'GALFA_HI_RA+DEC_' + string(cx, f='(I3.3)') + '.00+' +  string(cy, f='(I2.2)') + '.35_T.fits'
fits_write, Tname, inttime, hdr

restore,  getenv('GSRPATH') + 'savfiles/hdr.sav'
sxaddpar, hdr, 'NAXIS3', 2048
sxaddpar, hdr, 'OBJECT', 'GALFA-HI RA+DEC Tile ' + string(cx, f='(I3.3)') + '.00+' +  string(cy, f='(I2.2)') + '.35'
sxaddpar, hdr, 'CRPIX1', 256.5 - (180.0 - cx)/0.01666666
sxaddpar, hdr, 'CRPIX2', 256.5 - cy/0.01666666
sxaddpar, hdr, 'CRPIX3', 1024.50
sxaddpar, hdr, 'BSCALE', bs 
sxaddpar, hdr, 'BZERO', bz
sxaddpar, hdr, 'DATE', dt, 'Date data cube was created'

;Narrow
Nname = 'GALFA_HI_RA+DEC_' + string(cx, f='(I3.3)') + '.00+' +  string(cy, f='(I2.2)') + '.35_N.fits'
fits_write, Nname, nc, hdr

restore,  getenv('GSRPATH') + 'savfiles/hdr.sav'
sxaddpar, hdr, 'CDELT3',  184.0307099d*4d, format='(F13.9)'
sxaddpar, hdr, 'OBJECT', 'GALFA-HI RA+DEC Tile ' + string(cx, f='(I3.3)') + '.00+' +  string(cy, f='(I2.2)') + '.35'
sxaddpar, hdr, 'CRPIX1',  256.5 - (180.0 - cx)*60.
sxaddpar, hdr, 'CRPIX2', 256.5 - cy*60.
sxaddpar, hdr, 'CRPIX3', 1024.50
sxaddpar, hdr, 'BSCALE', bs 
sxaddpar, hdr, 'BZERO', bz
sxaddpar, hdr, 'DATE', dt, 'Date data cube was created'

;Wide
Wname = 'GALFA_HI_RA+DEC_' + string(cx, f='(I3.3)') + '.00+' +  string(cy, f='(I2.2)') + '.35_W.fits'
fits_write, Wname, nc, hdr

nc = 0.

if not keyword_set(noslice) then begin

;slices
restore, getenv('GSRPATH') + 'savfiles/RA_VEL_hdr.sav'
Sname = strarr(512)
; null slice
ns = intarr(512,8192)


print, 'Generating empty slices'
spawn, 'mkdir ' + 'GALFA_HI_RA+DEC_' + string(cx, f='(I3.3)') + '.00+' +  string(cy, f='(I2.2)') + '.35'
cd, 'GALFA_HI_RA+DEC_' + string(cx, f='(I3.3)') + '.00+' +  string(cy, f='(I2.2)') + '.35'
for i=0, 511 do begin
    loop_bar, i, 511
    hdr0 = hdr
    sxaddpar, hdr0, 'OBJECT', 'GALFA-HI RA-VEL Slice ' + string(cx, f='(I3.3)') + '.00+' +  string(cy, f='(I2.2)') + '.35' + ' ' + string(i+1, f='(I3.3)')
    sxaddpar, hdr0, 'CRPIX1', 256.5 - (180.0 - cx)*60.
    sxaddpar, hdr0, 'CRPIX3', 255.5 - cy*60. - i
    sxaddpar, hdr0, 'BSCALE', bs
    sxaddpar, hdr0, 'BZERO', bz
    sxaddpar, hdr0, 'DATE', dt, 'Date data cube was created'
    Sname[i] = 'GALFA_HI_RA+DEC_' + string(cx, f='(I3.3)') + '.00+' +  string(cy, f='(I2.2)') + '.35_' +  string(i+1, f='(I3.3)') +'.fits'
    fits_write, Sname[i], ns, hdr0
endfor
cd, '..'
endif


ns = 0.
for j=0, 3 do begin
    
    print, 'Writing to final cubes, ' + string(j, f='(I1.1)') + '/4'
;Narrow
    
    restore, fns[j]
    usecut = [-200, 200]        ; K, limits.
    tN = intscl(cubesav[0:255, 0:255, 3072:5119], bz, bs,cut=usecut, /force)
;blanks
    wh = where(cubesav[0:255, 0:255, 3072:5119] eq 0.0, ct)
    if ct ne 0 then tN[wh] = -32768
    cubesav=0.
    
;read and write Narrow cube
    Narrow = readfits(Nname, hdrN, /noscale, /silent)
    Narrow[256*((j+1) mod 2 ):256*((j+1) mod 2 ) +255, (j/2)*256:255+(j/2)*256, *] = tN
    fits_write, Nname, Narrow, hdrN
    Narrow =0.
    tN = 0.
    
;Wide
    restore, fns[j]
    rb = rebin(cubesav, 256, 256, 2048)
    tW = intscl(rb, bz, bs, cut=usecut, /force)
;blanks
    wh = where(rb eq 0.0, ct)
    if ct ne 0 then tW[wh] = -32768
    cubesav=0.
;read and write Wide cube
    Wide = readfits(Wname, hdrW, /noscale, /silent)
    Wide[256*((j+1) mod 2 ):256*((j+1) mod 2 ) +255, (j/2)*256:255+(j/2)*256, *] = tW
    fits_write, Wname, Wide, hdrW
    Wide = 0
    tW =0
    
    if not keyword_set(noslice) then begin
;Slices
        restore, fns[j]
        tS = intscl(cubesav, bz, bs,cut=usecut, /force)
;blanks
        wh = where(cubesav eq 0.0, ct)
        if ct ne 0 then tS[wh] = -32768
        cubesav = 0.
        
; Read and Write RA-VEL Slices
        
        cd, 'GALFA_HI_RA+DEC_' + string(cx, f='(I3.3)') + '.00+' +  string(cy, f='(I2.2)') + '.35'
        
        for i = 0, 255 do begin
            Slice = readfits(Sname[i+(j/2)*256], hdrS, /noscale, /silent)
            Slice[256*((j+1) mod 2 ):256*((j+1) mod 2 ) +255, *] = tS[0:255, i, 0:8191]
            fits_write, Sname[i+(j/2)*256], slice, hdrS
        endfor
        tS = 0
        cd, '..'
        
    endif
    
endfor
 
spawn, 'rm ' + fn00
spawn, 'rm ' + fn01
spawn, 'rm ' + fn10
spawn, 'rm ' + fn11

; cleanup .SL.sav files
if not (keyword_set(nocleanup)) then begin
if keyword_set(strad) then begin
    for i=0, n_elements(fls)-1 do begin
        spawn, 'rm ' + fls[i]
    endfor
endif
endif

print, 'time elapsed:' + string((systime(/sec)-starttime)/3600., f ='(G6.4)') + ' hours'



end
